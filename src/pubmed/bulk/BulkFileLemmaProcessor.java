
package pubmed.bulk;

import java.io.File;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.regex.Pattern;

import jam.app.JamLogger;
import jam.io.IOUtil;
import jam.lang.JamException;
import jam.report.LineBuilder;
import jam.util.ListUtil;
import jam.util.RegexUtil;
import jam.util.StreamUtil;

import pubmed.article.PMID;
import pubmed.article.PubmedArticle;
import pubmed.article.PubmedXmlDocument;
import pubmed.nlp.LemmaAnnotator;
import pubmed.nlp.LemmaList;

/**
 * Identifies all {@code PubMed} bulk data files in a given directory,
 * parse them, lemmatizes the article titles and abstracts, and writes
 * the lemmas to new data files.
 */
public final class BulkFileLemmaProcessor extends BulkFileProcessor {
    private static BulkFileLemmaProcessor instance = null;

    private BulkFileLemmaProcessor() {
    }

    private static final String PMID_DELIM_STRING = ":";
    private static final Pattern PMID_DELIM_PATTERN = RegexUtil.COLON;

    private static final String LEMMA_DELIM_STRING = " ";
    private static final Pattern LEMMA_DELIM_PATTERN = RegexUtil.MULTI_WHITE_SPACE;

    /**
     * Returns the single lemma processor.
     *
     * @return the single lemma processor.
     */
    public synchronized static BulkFileLemmaProcessor instance() {
        if (instance == null)
            instance = new BulkFileLemmaProcessor();

        return instance;
    }

    /**
     * Reads article identifiers and lemmas from a delimited file.
     *
     * @param lemmaFile a title or abstract lemma file previously
     * generated by the processor.
     *
     * @return a map containing the lemmas for each article key.
     *
     * @throws RuntimeException unless the file can be read and
     * parsed successfully.
     */
    public static Map<PMID, LemmaList> load(File lemmaFile) {
        List<String> lines = IOUtil.readLines(lemmaFile);

        Map<PMID, LemmaList> lemmaMap =
            new LinkedHashMap<PMID, LemmaList>(lines.size());

        for (String line : lines) {
            String[] fields = RegexUtil.split(PMID_DELIM_PATTERN, line, 2);
            PMID     pmid   = PMID.instance(fields[0]);
            String[] lemmas = RegexUtil.split(LEMMA_DELIM_PATTERN, fields[1]);

            lemmaMap.put(pmid, LemmaList.create(lemmas));
        }

        return lemmaMap;
    }

    @Override public void processFile(File bulkFile) {
        File titleLemmaFile = getTitleLemmaFile(bulkFile);
        File abstractLemmaFile = getAbstractLemmaFile(bulkFile);

        if (titleLemmaFile.canRead() && abstractLemmaFile.canRead()) {
            JamLogger.info("Bulk file has been processed; skipping...");
            return;
        }

        PubmedXmlDocument document = PubmedXmlDocument.parse(bulkFile);
        List<PubmedArticle> articles = document.viewLatest();

        if (!titleLemmaFile.canRead()) {
            JamLogger.info("Lemmatizing article titles...");
            processLemmas(articles, titleLemmaFile, article -> lemmatizeTitle(article));
        }

        if (!abstractLemmaFile.canRead()) {
            JamLogger.info("Lemmatizing article abstracts...");
            processLemmas(articles, abstractLemmaFile, article -> lemmatizeAbstract(article));
        }
    }

    private void processLemmas(List<PubmedArticle> articles, File lemmaFile,
                               Function<PubmedArticle, String> lemmaFunc) {
        List<String> lemmaLines =
            StreamUtil.apply(articles.parallelStream(), lemmaFunc);

        lemmaLines =
            ListUtil.filter(lemmaLines, line -> line != null);

        JamLogger.info("Writing lemma file [%s]...", lemmaFile);
        IOUtil.writeLines(lemmaFile, false, lemmaLines);
    }

    private static String lemmatizeAbstract(PubmedArticle article) {
        return lemmatize(article.getPMID(), article.getAbstract());
    }

    private static String lemmatizeTitle(PubmedArticle article) {
        return lemmatize(article.getPMID(), article.getTitle());
    }

    private static String lemmatize(PMID pmid, String text) {
        if (text == null || text.isBlank())
            return null;

        LemmaList lemmas = LemmaAnnotator.contentWords(text);

        if (lemmas.isEmpty())
            return null;

        StringBuilder builder = new StringBuilder();

        builder.append(pmid.intValue());
        builder.append(PMID_DELIM_STRING);
        builder.append(lemmas.get(0));

        for (int index = 1; index < lemmas.size(); ++index) {
            builder.append(LEMMA_DELIM_STRING);
            builder.append(lemmas.get(index));
        }

        return builder.toString();
    }

    private static void usage() {
        System.err.println("Usage: pubmed.bulk.BulkFileLemmaProcessor DIR1 [DIR2 ...]");
        System.exit(1);
    }

    public static void main(String[] args) {
        if (args.length < 1)
            usage();

        for (String directory : args)
            instance().processDirectory(directory);
    }
}
